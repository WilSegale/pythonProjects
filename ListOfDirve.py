{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 64\n",
      "lrwxr-xr-x  1 root   wheel      1 Jun  2 09:06 \u001b[35mMacintosh HD\u001b[m\u001b[m -> /\n",
      "drwxrwxrwx@ 1 admin  staff  32768 Jun  5 17:38 \u001b[30m\u001b[43mSDCARD\u001b[m\u001b[m\n",
      "\u001b[32mEnter the external hard drive ex(EXTERNAL_HARDWARE)\u001b[39m\n",
      "Total: 460\n",
      "Free: 359\n",
      "Used: 100\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-] Exiting...\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from numpy import arange\n",
    "from colorama import *\n",
    "import readline\n",
    "import os\n",
    "\n",
    "quit = [\"exit\", \n",
    "        \"quit\", \n",
    "        \"EXIT()\",\n",
    "        \"EXIT\",\n",
    "        \"Exit\",\n",
    "        \"QUIT\",\n",
    "        \"Quit\",\n",
    "        \"QUIT()\"]\n",
    "\n",
    "GREEN = Fore.GREEN\n",
    "RESET = Fore.RESET\n",
    "\n",
    "def get_drive_capacity(drive_path):\n",
    "    total = os.statvfs(drive_path).f_blocks * os.statvfs(drive_path).f_frsize\n",
    "    free = os.statvfs(drive_path).f_bavail * os.statvfs(drive_path).f_frsize\n",
    "    used = total - free\n",
    "    print(f\"Total: {total // (2 ** 30)}\")\n",
    "    print(f\"Free: {free // (2 ** 30)}\")\n",
    "    print(f\"Used: {used // (2 ** 30)}\")\n",
    "    return used, free, total\n",
    "\n",
    "directory = \"/Volumes\"\n",
    "\n",
    "os.system(f\"ls -l {directory}\")\n",
    "\n",
    "print(f\"{GREEN}Enter the external hard drive ex(EXTERNAL_HARDWARE){RESET}\")\n",
    "\n",
    "# Define autocomplete function for external hard drive input\n",
    "def autocomplete(text, state):\n",
    "    options = [name for name in os.listdir(directory) if name.startswith(text)]\n",
    "    if state < len(options):\n",
    "        return options[state]\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "# Enable autocomplete for input_path\n",
    "readline.parse_and_bind('tab: complete')\n",
    "readline.set_completer(autocomplete)\n",
    "while True:\n",
    "    input_path = input(\">>> \")\n",
    "    if input_path in quit:\n",
    "        print(\"[-] Exiting...\")\n",
    "        break\n",
    "    # if the user inputs only \"/\" it only shows the main drive\n",
    "    if input_path == \"/\":\n",
    "        drive_paths = [\"/\"]\n",
    "\n",
    "        drive_names = []\n",
    "\n",
    "        total_capacities = []\n",
    "        free_capacities = []\n",
    "        used_capacities = []\n",
    "\n",
    "        # Iterate over drive paths\n",
    "        for drive_path in drive_paths:\n",
    "            used_capacity, free_capacity, total_capacity = get_drive_capacity(drive_path)\n",
    "            drive_names.append(drive_path)\n",
    "            used_capacities.append(used_capacity // (2 ** 30))\n",
    "            free_capacities.append(free_capacity  // (2 ** 30))\n",
    "            total_capacities.append(total_capacity  // (2 ** 30)) \n",
    "\n",
    "\n",
    "        fig, ax = plt.subplots()\n",
    "        bar_width = 100\n",
    "\n",
    "        # Calculate the positions of the bars\n",
    "        index = arange(len(drive_names))\n",
    "\n",
    "        # Plot the bars\n",
    "        ax.bar(index, used_capacities, bar_width, label='Used')\n",
    "        ax.bar(index + bar_width, free_capacities, bar_width, label='Free')\n",
    "        ax.bar(index + 2 * bar_width, total_capacities, bar_width, label='Total')\n",
    "\n",
    "        ax.set_xlabel('Drive')\n",
    "        ax.set_ylabel('Capacity')\n",
    "        ax.set_title(f'Capacity of Drives for {drive_paths}')\n",
    "        ax.set_xticks(index + bar_width)\n",
    "        ax.set_xticklabels(drive_names, rotation=45)\n",
    "        ax.legend()\n",
    "\n",
    "        plt.show()\n",
    "        \n",
    "    elif input_path == \"\":\n",
    "        print('ERROR: INPUT PATH MUST BE SPECIFIED.')\n",
    "\n",
    "    # List of drive paths\n",
    "    else:\n",
    "        drive_paths = [f\"/Volumes/{input_path}\"]\n",
    "\n",
    "        drive_names = []\n",
    "\n",
    "        total_capacities = []\n",
    "        free_capacities = []\n",
    "        used_capacities = []\n",
    "\n",
    "        # Iterate over drive paths\n",
    "        for drive_path in drive_paths:\n",
    "            used_capacity, free_capacity, total_capacity = get_drive_capacity(drive_path)\n",
    "            drive_names.append(drive_path)\n",
    "            used_capacities.append(used_capacity // (2 ** 30))\n",
    "            free_capacities.append(free_capacity  // (2 ** 30))\n",
    "            total_capacities.append(total_capacity  // (2 ** 30)) \n",
    "\n",
    "\n",
    "        fig, ax = plt.subplots()\n",
    "        bar_width = 100\n",
    "\n",
    "        # Calculate the positions of the bars\n",
    "        index = arange(len(drive_names))\n",
    "\n",
    "        # Plot the bars\n",
    "        ax.bar(index, used_capacities, bar_width, label='Used')\n",
    "        ax.bar(index + bar_width, free_capacities, bar_width, label='Free')\n",
    "        ax.bar(index + 2 * bar_width, total_capacities, bar_width, label='Total')\n",
    "\n",
    "        ax.set_xlabel('Drive')\n",
    "        ax.set_ylabel('Capacity')\n",
    "        ax.set_title(f'Capacity of Drives for {drive_paths}')\n",
    "        ax.set_xticks(index + bar_width)\n",
    "        ax.set_xticklabels(drive_names, rotation=45)\n",
    "        ax.legend()\n",
    "\n",
    "        plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
